diff --git a/CMakeLists.txt b/CMakeLists.txt
index a06b1cf..2319e64 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -12,7 +12,6 @@ set(CMAKE_CXX_STANDARD_REQUIRED ON)
 find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets)
 find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets)
 find_package(Qt${QT_VERSION_MAJOR}Charts REQUIRED)
-find_package(Qt${QT_VERSION_MAJOR}Charts REQUIRED)
 find_package(Boost)
 
 set(PROJECT_SOURCES
@@ -57,7 +56,7 @@ else()
     endif()
 endif()
 
-target_link_libraries(twiice_notion_exercise PRIVATE Qt${QT_VERSION_MAJOR}::Widgets)
+target_link_libraries(twiice_notion_exercise PRIVATE Qt${QT_VERSION_MAJOR}::Widgets  Qt${QT_VERSION_MAJOR}::Charts)
 
 # Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.
 # If you are developing for iOS or macOS you should consider setting an
diff --git a/Notes b/Notes
index 4313402..828222e 100644
--- a/Notes
+++ b/Notes
@@ -1,7 +1,3 @@
- // move factory method to dedicated file
-
-
-
 // Breaks
 
 1. 12:40:19 -> 13:50:18 = 1h10 (setup qt, makefile, boost, wkv classes (pure virtual, base, children class imu/hip
@@ -11,4 +7,5 @@ Date:   Tue Jun 18 13:50:18 2024 +0200
 
     feat: implement sensor data architecture with inheritance and factory
 
-2. back at 16h16
+2. Back at 16h16
+
diff --git a/hipsensor.cpp b/hipsensor.cpp
index 160878f..63d26e4 100644
--- a/hipsensor.cpp
+++ b/hipsensor.cpp
@@ -1,7 +1,48 @@
 #include "hipsensor.h"
+#include <chrono>
+#include <random>
 
 HipSensor::HipSensor(const std::string &name, const std::string &unit)
     : WKV(name, unit)
 {}
 
-void HipSensor::generateData(int frequency, double jitter, int duration_seconds) {}
+void HipSensor::generateData(int frequency, double jitter, int duration_seconds)
+{
+    std::default_random_engine generator(
+        static_cast<unsigned>(std::chrono::system_clock::now().time_since_epoch().count()));
+    std::normal_distribution<double> jitter_distribution(1.0, jitter);
+    std::normal_distribution<double> noise_distribution(0.0, 0.001); // Gaussian noise
+
+    const uint64_t start_time_us = std::chrono::duration_cast<std::chrono::microseconds>(
+                                       std::chrono::system_clock::now().time_since_epoch())
+                                       .count();
+    const uint64_t end_time_us = start_time_us
+                                 + static_cast<uint64_t>(duration_seconds)
+                                       * 1000000; // Convert seconds to microseconds
+    uint64_t current_time_us = start_time_us;
+    this->start_time_us_ = start_time_us; // Store the actual start time in the sensor object
+
+    // Hip angle-specific parameters
+    const double amplitude = 60.0;                 // Example amplitude in degrees
+    const double max_change_per_ms = 220.0 / 1000; // Max degrees change per millisecond
+    const double base_frequency = 1;               // Base frequency for hip movements
+
+    while (current_time_us <= end_time_us) {
+        const auto interval_us = static_cast<uint64_t>(
+            1000000 / static_cast<double>(frequency)
+            * jitter_distribution(generator)); // Apply jitter in microseconds
+        const double time_in_seconds = (current_time_us - start_time_us) / 1e6;
+
+        // Add a periodic component to simulate regular movements
+        const double periodic_component = amplitude
+                                          * std::sin(2 * M_PI * base_frequency * time_in_seconds);
+
+        // Combine the components and add noise
+        double sensor_value = periodic_component + noise_distribution(generator);
+
+        addDataPoint(current_time_us, sensor_value);
+        current_time_us += interval_us;
+    }
+
+    emit sensorDataReady(*this);
+}
diff --git a/imusensor.cpp b/imusensor.cpp
index 8daa52b..bacd87b 100644
--- a/imusensor.cpp
+++ b/imusensor.cpp
@@ -4,4 +4,9 @@ IMUSensor::IMUSensor(const std::string &name, const std::string &unit)
     : WKV(name, unit)
 {}
 
-void IMUSensor::generateData(int frequency, double jitter, int duration_seconds) {}
+void IMUSensor::generateData(int frequency, double jitter, int duration_seconds)
+{
+    //todo impl
+
+    emit sensorDataReady(*this);
+}
diff --git a/iwkv.h b/iwkv.h
index 8f6e9a7..5d758cc 100644
--- a/iwkv.h
+++ b/iwkv.h
@@ -1,6 +1,7 @@
 #ifndef IWKV_H
 #define IWKV_H
-
+#include <QObject>
+#include "qtmetamacros.h"
 #include <string>
 #include <vector>
 
@@ -8,8 +9,13 @@
  * @brief The IWKV interface defines the required functionalities for sensor data handling classes.
  * This includes data generation, retrieval, and setting of sensor attributes.
  */
-class IWKV
+class IWKV : public QObject
 {
+    Q_OBJECT
+
+signals:
+    void sensorDataReady(const IWKV &wkv);
+
 public:
     virtual ~IWKV() {}
 
diff --git a/main.cpp b/main.cpp
index 6565fd4..f755250 100644
--- a/main.cpp
+++ b/main.cpp
@@ -1,5 +1,4 @@
 #include <QApplication>
-#include "boost_example.h"
 #include "wkvfactory.h"
 
 #include "mainwindow.h"
@@ -14,6 +13,12 @@ int main(int argc, char *argv[])
     auto hip_angle_sensor = WKVFactory::createSensor("Hip");
     auto imu_sensor = WKVFactory::createSensor("IMU");
 
+    QObject::connect(hip_angle_sensor.get(), &IWKV::sensorDataReady, &w, &MainWindow::updateUI);
+    QObject::connect(imu_sensor.get(), &IWKV::sensorDataReady, &w, &MainWindow::updateUI);
+
+    hip_angle_sensor->generateData(1000, 0.02, 20);
+    imu_sensor->generateData(400, 0.03, 20);
+
     // Ensure sensors were created successfully
     if (!hip_angle_sensor || !imu_sensor) {
         std::cerr << "Failed to create sensors." << std::endl;
diff --git a/mainwindow.cpp b/mainwindow.cpp
index 7925ae2..2cdc3d6 100644
--- a/mainwindow.cpp
+++ b/mainwindow.cpp
@@ -1,4 +1,8 @@
 #include "mainwindow.h"
+#include <QtCharts/QChart>
+#include <QtCharts/QChartView>
+#include <QtCharts/QLineSeries>
+#include <QtCharts/QValueAxis>
 #include "./ui_mainwindow.h"
 
 MainWindow::MainWindow(QWidget *parent)
@@ -6,9 +10,37 @@ MainWindow::MainWindow(QWidget *parent)
     , ui(new Ui::MainWindow)
 {
     ui->setupUi(this);
+    tabWidget = new QTabWidget(this);
+    setCentralWidget(tabWidget);
 }
 
 MainWindow::~MainWindow()
 {
     delete ui;
 }
+
+void MainWindow::updateUI(const IWKV &wkv)
+{
+    QChart *chart = new QChart();
+    chart->setTitle(QString::fromStdString(wkv.getName()));
+    QLineSeries *series = new QLineSeries();
+    for (int i = 0; i < wkv.getTimestampsUs().size(); ++i) {
+        series->append((wkv.getTimestampsUs()[i] - wkv.getStartTimeUs()) / 1e6, wkv.getData()[i]);
+    }
+
+    chart->addSeries(series);
+    QValueAxis *axisX = new QValueAxis;
+    axisX->setTitleText("Time (s)");
+    axisX->setTickCount(21);
+    chart->addAxis(axisX, Qt::AlignBottom);
+    series->attachAxis(axisX);
+
+    QValueAxis *axisY = new QValueAxis;
+    axisY->setTitleText("Value");
+    chart->addAxis(axisY, Qt::AlignLeft);
+    series->attachAxis(axisY);
+
+    QChartView *chartView = new QChartView(chart);
+    chartView->setRenderHint(QPainter::Antialiasing);
+    tabWidget->addTab(chartView, chart->title());
+}
diff --git a/mainwindow.h b/mainwindow.h
index e0836a4..805beff 100644
--- a/mainwindow.h
+++ b/mainwindow.h
@@ -2,6 +2,7 @@
 #define MAINWINDOW_H
 
 #include <QMainWindow>
+#include "iwkv.h"
 
 QT_BEGIN_NAMESPACE
 namespace Ui {
@@ -19,5 +20,9 @@ public:
 
 private:
     Ui::MainWindow *ui;
+    QTabWidget *tabWidget;
+
+public slots:
+    void updateUI(const IWKV &wkv);
 };
 #endif // MAINWINDOW_H
